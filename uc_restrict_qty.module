<?php
// $Id$

/**
 * @file
 * Restrict the quantity on specified products so that only one may be purchased
 * at a time.
 *
 * Sponsored by Flat World Knowledge - http://www.flatworldknowledge.com
 * And Kirkdesigns - http://www.kirkdesigns.co.uk
 */

/**
 * Implementation of hook_help().
 */
function uc_restrict_qty_help($path, $arg) {
  switch ($path) {
    case 'admin/store/settings/restrict_qty':
      return t('You may use this page to set a global limit on the number of items that a shopping cart may contain.');      
   }
}

/**
 * Implementation of hook_menu().
 */
function uc_restrict_qty_menu() {
  $items['admin/store/settings/restrict_qty'] = array(
    'title' => 'Restrict Qty',
    'description' => 'Adjust settings for Ubercart Restrict Qty feature.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_restrict_qty_admin_form'),
    'access arguments' => array('administer products'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function uc_restrict_qty_theme() {
  return array(
    'restrict_qty_field' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_product_feature().
 */
function uc_restrict_qty_product_feature() {
  $features[] = array(
    'id' => 'restrict_qty',
    'title' => t('Restrict Qty'),
    'callback' => 'uc_restrict_qty_feature_form',
  );
  return $features;
}

// Builds the form to display for adding or editing a the restricted quantity feature.
function uc_restrict_qty_feature_form($form_state, $node, $feature) {
  if (empty($feature)) {
    // It's not necessary to add more than one of these features at the moment.
    if ($result = db_result(db_query("SELECT COUNT(*) FROM {uc_product_features} WHERE nid = %d AND fid = '%s'", $node->nid, 'restrict_qty'))) {
      drupal_set_message(t('Adding more than one Restrict Qty. does nothing for now.'));
    }
    else {
      $data = array(
        'pfid' => db_last_insert_id('uc_product_features', 'pfid'),
        'nid' => $node->nid,
        'fid' => 'restrict_qty',
        'description' => t('Users may only purchase one of this product at a time.'),
      );
      drupal_goto(uc_product_feature_save($data));
    }
  }
  else {
    drupal_set_message(t('There are no settings to edit for Restrict Qty. features.'));
  }
  drupal_goto('node/'. $node->nid .'/edit/features');
}

/**
 * Implementation of hook_add_to_cart().
 */
function uc_restrict_qty_add_to_cart($nid, $qty, $data) {
  if (variable_get('uc_restrict_qty_global', 0)) {
    $cart_items = uc_cart_get_contents(uc_cart_get_id());
    if (sizeof($cart_items) >= variable_get('uc_restrict_qty_global', 0)) {
      $result[] = array(
        'success' => FALSE,
        'message' => t('Sorry, you may only have @qty in your cart. Please remove something from your cart first.',
          array(
            '@qty' => format_plural(variable_get('uc_restrict_qty_global', 0), '1 item', '@count items'),
          )),
      );
    }
  }
  return $result;
}

/**
 * Implementation of hook_add_to_cart_data().
 */
function uc_restrict_qty_add_to_cart_data($form_values) {
  return array('restrict_qty' => uc_restrict_qty_count($form_values['nid']));
}

/**
 * Implementation of hook_cart_item().
 */
function uc_restrict_qty_cart_item($op, &$item) {
  if ($op == 'load') {
    // If this item has a quantity restriction on it...
    if ($item->data['restrict_qty'] > 0 && $item->qty > 1) {
      db_query("UPDATE {uc_cart_products} SET qty = 1, changed = %d WHERE nid = %d AND cart_id = '%s' AND data = '%s'", time(), $item->nid, uc_cart_get_id(), serialize($item->data));
      $item->qty = 1;
    }
    // If this item quantity has exceeded the global restriction...
    elseif (variable_get('uc_restrict_qty_global', 0) && $item->qty >= variable_get('uc_restrict_qty_global', 0)) {
      db_query("UPDATE {uc_cart_products} SET qty = %d, changed = %d WHERE nid = %d AND cart_id = '%s' AND data = '%s'", variable_get('uc_restrict_qty_global', 0), time(), $item->nid, uc_cart_get_id(), serialize($item->data));
      $item->qty = variable_get('uc_restrict_qty_global', 0);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_restrict_qty_form_alter(&$form, &$form_state, $form_id) {
  // Disable the appropriate Qty. fields on the cart view form.
  if ($form_id == 'uc_cart_view_form') {
    foreach ($form['#parameters'][2] as $key => $item) {
      // If this item has a quantity restriction feature on it...
      if ($item->data['restrict_qty'] > 0) {
        $form['items'][$key]['qty']['#attributes']['readonly'] = 'readonly';
        //$form['items'][$key]['qty']['#theme'] = 'restrict_qty_field';
      }
    }
  }
}

// builds the admin settings form.
function uc_restrict_qty_admin_form() {
  $form['uc_restrict_qty_global'] = array(
    '#title' => t('Global limit'),
    '#type' => 'textfield',
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('The total number of products that can be added to a cart. Set to 0 for unlimited.'),
    '#default_value' => variable_get('uc_restrict_qty_global', 0),
  );
  $form['#validate'][] = 'uc_restrict_qty_admin_form_validate';
  return system_settings_form($form);
}

// Ensure user has entered a sensible value.
function uc_restrict_qty_admin_form_validate(&$form, $form_state) {
  if (!is_numeric($form_state['values']['uc_restrict_qty_global'])) {
    form_set_error('uc_restrict_qty_global', t('Please enter a numeric value.'));
  }
  if ($form_state['values']['uc_restrict_qty_global'] < 0) {
    form_set_error('uc_restrict_qty_global', t('Please enter a positive integer.'));
  }
}

// Themes cart Qty. boxes so they can't be changed. (currently not in use)
function theme_restrict_qty_field($element) {
  return check_plain($element['#value']);
}

// Returns the number of restrict_qty features on a product node.
function uc_restrict_qty_count($nid) {
  return db_result(db_query("SELECT COUNT(*) FROM {uc_product_features} WHERE nid = %d AND fid = '%s'", $nid, 'restrict_qty'));
}
