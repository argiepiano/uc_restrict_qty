<?php

/**
 * @file
 * Restrict the quantity on specified products so that only specified quantity
 * may be purchased at a time.
 */


/**
 * Implements hook_theme().
 */
function uc_restrict_qty_theme() {
  return array(
    'restrict_qty_field' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_uc_product_feature().
 */
function uc_restrict_qty_uc_product_feature() {
  $features[] = array(
    'id' => 'restrict_qty',
    'title' => t('Restrict Qty'),
    'callback' => 'uc_restrict_qty_feature_form',
    'delete' => 'uc_restrict_qty_feature_delete',
    'settings' => 'uc_restrict_qty_settings',
  );
  return $features;
}

/**
 * Implements hook_config_info().
 */
function uc_restrict_qty_config_info() {
  $prefixes['uc_restrict_qty.settings'] = array(
    'label' => t('UC Restrict Qty settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Adds settings to the product features form for UC Restrict Qty.
 */
function uc_restrict_qty_settings($form, &$form_state) {
  $config = config('uc_restrict_qty.settings');
  $form['#description'] = t('This feature is limited in scope to preventing a user from adding different products to the cart.  This does not restrict the quantity of products in the cart if updated after being added, so this feature is best used on sites where all products have a restrict quantity feature on them.');

  $form['uc_restrict_qty_global'] = array(
    '#title' => t('Global limit'),
    '#type' => 'textfield',
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('The number of different products that can be added to a cart. Set to 0 for unlimited.'),
    '#default_value' => $config->get('uc_restrict_qty_global'),
  );
  $form['uc_restrict_qty_global_replace'] = array(
    '#title' => t('Replace Contents'),
    '#type' => 'checkbox',
    '#description' => t('Enabling this feature will cause the users cart to be emptied if they add more items than the Global Limit set above. This is best used when you offer mutually exclusive content (such as subscription services) where purchasing more then one product is not a valid option.'),
    '#default_value' => $config->get('uc_restrict_qty_global_replace'),
  );
  $form['defaults'] = array(
    '#title' => t('Defaults'),
    '#type' => 'fieldset',
    '#description' => t('These options will take action, only if product has the "Restrict quantity" feature activated.'),
  );
  $form['defaults']['uc_restrict_qty_default_qty'] = array(
    '#title' => t("Default maximum limit for a product"),
    '#type' => 'textfield',
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('The number of products of single type that can be added to a cart. Set to 0 for unlimited.'),
    '#default_value' => $config->get('uc_restrict_qty_default_qty'),
  );
  $form['defaults']['uc_restrict_qty_default_lifetime'] = array(
    '#title' => t("Is restriction is the user's lifetime limit"),
    '#type' => 'checkbox',
    '#description' => t("Useful when you want to prevent double ordering of a product."),
    '#default_value' => $config->get('uc_restrict_qty_default_lifetime'),
  );

  return $form;
}

/**
 * Validates the textfield on the product features settings form.
 */
function uc_restrict_qty_settings_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['uc_restrict_qty_global']) || $form_state['values']['uc_restrict_qty_global'] < 0) {
    form_set_error('uc_restrict_qty_global', t('You must enter 0 or a positive number value.'));
  }
  if (!is_numeric($form_state['values']['uc_restrict_qty_default_qty']) || $form_state['values']['uc_restrict_qty_default_qty'] < 0) {
    form_set_error('uc_restrict_qty_default_qty', t('You must enter 0 or a positive number value.'));
  }
}

/**
 * Builds the form to display for adding or editing a the restricted quantity feature.
 */
function uc_restrict_qty_feature_form($form, &$form_state, $node, $feature) {
  $config = config('uc_restrict_qty.settings');
  $models = uc_product_get_models($node->nid, FALSE);
  if (!empty($feature)) {
    $product_qty = db_query("SELECT * FROM {uc_restrict_qty_products} WHERE pfid = :pfid", array(':pfid' => $feature['pfid']))->fetchObject();

    $default_qty = $product_qty->qty;
    $default_model = $product_qty->model;
    $default_lifetime = $product_qty->lifetime;
    $default_all_variations = $product_qty->all_variations;
 
    $form['pfid'] = array(
      '#type' => 'value',
      '#value' => $feature['pfid'],
    );
    $form['rqpid'] = array(
      '#type' => 'value',
      '#value' => $product_qty->rqpid,
    );
  }

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  $form['all_variations'] = array(
    '#title' => t('Restrict all variations of this product'),
    '#description' => t('If checked, all variations of a product will be counted toward the quantity limit.'),
    '#type' => 'checkbox',
    '#default_value' => isset($default_all_variations) ? $default_all_variations : $config->get('uc_restrict_qty_default_all_variations'),
  );
  $form['model'] = array(
    '#type' => 'select',
    '#title' => t('SKU'),
    '#default_value' => isset($default_model) ? $default_model : 0,
    '#description' => t('This is the SKU of the product that will be restricted to this quantity. If any variations of this product use the same SKU, the quantities will be restricted for each variation.'),
    '#options' => $models,
    '#states' => array(
      'visible' => array(
        ':input[name="all_variations"]' => array('checked' => FALSE)
      ),
    ),
  );
  $form['quantity'] = array(
    '#title' => t('Quantity limit'),
    '#type' => 'textfield',
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('The number of times this product can be added to a cart. Set to 0 for unlimited.'),
    '#default_value' => isset($default_qty) ? $default_qty : $config->get('uc_restrict_qty_default_qty'),
  );
  $form['lifetime'] = array(
    '#title' => t('Is it a lifetime restriction?'),
    '#type' => 'checkbox',
    '#description' => t("If checked, user's ordering history will be taken into account too. Useful when you want to prevent double ordering of a product."),
    '#default_value' => isset($default_lifetime) ? $default_lifetime : $config->get('uc_restrict_qty_default_lifetime'),
  );
  return uc_product_feature_form($form, $form_state, $node, $feature);
}

/**
 * Validates the textfield on the product node feature settings form.
 */
function uc_restrict_qty_feature_form_validate($form, &$form_state) {
  // Check for invalid quantity.
  if (!is_numeric($form_state['values']['quantity']) || $form_state['values']['quantity'] < 0) {
    form_set_error('uc_restrict_qty_product_qty', t('You must enter 0 or a positive integer value.'));
  }

  if (empty($form_state['values']['all_variations'])) {
    // Check if this feature is already set on this SKU.
    $product_roles = db_query("SELECT * FROM {uc_restrict_qty_products} WHERE nid = :nid AND model = :model", array(
      ':nid' => $form_state['values']['nid'],
      ':model' => $form_state['values']['model'],
    ))->fetchObject();

    if ($product_roles && $form_state['values']['pfid'] == 0) {
      form_set_error('uc_roles_model', t('A quantity restriction has already been set up for this SKU'));
    }
  } 
  else {
    // Check if this feature is already set on this SKU.
    $product_roles = db_query("SELECT * FROM {uc_restrict_qty_products} WHERE nid = :nid", array(
      ':nid' => $form_state['values']['nid'],
    ))->fetchObject();

    if ($product_roles && $form_state['values']['pfid'] == 0) {
      form_set_error('uc_roles_model', t('A quantity restriction has already been set up for the node ID of this product'));
    }
  }

}

/**
 * Form submit handler for the roles feature form.
 */
function uc_restrict_qty_feature_form_submit($form, &$form_state) {
  $product_qty = array(
    'rqpid' => isset($form_state['values']['rqpid']) ? $form_state['values']['rqpid'] : NULL,
    'pfid' => isset($form_state['values']['pfid']) ? $form_state['values']['pfid'] : NULL,
    'nid' => $form_state['values']['nid'],
    'model' => $form_state['values']['model'],
    'qty' => $form_state['values']['quantity'],
    'all_variations' => $form_state['values']['all_variations'],
    'lifetime' => $form_state['values']['lifetime'],
  );

  $description = '';
  $description .= '<strong>' . t('Restriction applied to') . ': </strong>' . ($product_qty['all_variations'] ? t('All variations of this product') : t('Products with this SKU')) . '<br/>';
  if (!$product_qty['all_variations']) {
    $description .= '<strong>' . t('SKU') . ':</strong>' . (empty($product_qty['model'])?t('Any') : $product_qty['model']) . '<br/>';
  }
  $description .= '<strong>' . t('Quantity restriction') . ': </strong>' . $product_qty['qty'] . '<br/>';
  $description .= '<strong>' . t('Type') . ': </strong>' . ($product_qty['lifetime'] ? t('Lifetime') : t('Cart max.')) . '<br/>';

  $data = array(
    'nid' => $product_qty['nid'],
    'fid' => 'restrict_qty',
    'description' => $description,
  );

  if (isset($product_qty['pfid'])) {
    $data['pfid'] = $product_qty['pfid'];
  }

  $form_state['redirect'] = uc_product_feature_save($data);

  $key = array();
  if ($product_qty['rqpid']) {
    $key[] = 'rqpid';
  }

  // Insert or update uc_file_product table
  if (empty($product_qty['pfid'])) {
    $product_qty['pfid'] = $data['pfid'];
  }

  backdrop_write_record('uc_restrict_qty_products', $product_qty, $key);
}

/**
 * Implements hook_uc_add_to_cart().
 */
function uc_restrict_qty_uc_add_to_cart($nid, $qty, $data) {
  $config = config('uc_restrict_qty.settings');
  $limit = $config->get('uc_restrict_qty_global');
  $replacecart = $config->get('uc_restrict_qty_global_replace');
  $result = NULL;

  // If a global restriction on the number of items has been made.
  if ($limit > 0) {
    if (count(uc_cart_get_contents()) >= $limit) {
      if ($replacecart) {
        db_query("DELETE FROM {uc_cart_products} WHERE cart_id = :cart", array(':cart' => uc_cart_get_id()));
        $result[] = array('success' => TRUE);
      }
      else {
        $message = format_plural($limit, 'Sorry, you may only have 1 item in your cart. You must checkout or remove the item in your cart before adding a different item.',
        'Sorry, you may only have a total of @count items in your cart.  You must checkout or remove items from your cart before adding others.');

        $result[] = array(
          'success' => FALSE,
          'message' => $message,
        );
      }
    }
  }

  // Check lifetime product-level limit.
  if (!empty($data['restrict_qty']['lifetime'])) {
    if (!$data['restrict_qty']['rest']) {
      $message = t('Sorry, you have reached the quantity limit for this product. You can not order more items of this product.');

      $result[] = array(
        'success' => FALSE,
        'message' => $message,
      );
    }
  }

  // Check all variations in cart and calculate limit.
  if (!empty($data['restrict_qty']['all_variations'])) {
    $cart_items = uc_cart_get_contents();
    $restrict_qty = $data['restrict_qty']['qty'];
    $cart_qty = 0;
    // Add the quantities of other variations if any.
    foreach ($cart_items as $uc_cart_item) {
      $cart_qty += $uc_cart_item->qty;
    }
    if (!empty($data['restrict_qty']['lifetime'])) {
      $restrict_qty = $data['restrict_qty']['rest'];
    }
    if ($cart_qty + $qty > $restrict_qty && $restrict_qty - $cart_qty < 1) {
      $message = t('Sorry, you have reached the quantity limit for this product. You can not order more items of this product.');
      $result[] = array(
        'success' => FALSE,
        'message' => $message,
      );
    }
  }
  
  return $result;
}

/**
 * Implements hook_uc_add_to_cart_data().
 * @param $form_values
 *   The values submitted to the Add to Cart form.
 *
 * @return
 *   An array of data to be merged into the item added to the cart.
 */
function uc_restrict_qty_uc_add_to_cart_data($form_values) {
  return array('restrict_qty' => uc_restrict_qty_count($form_values));
}

function  uc_restrict_qty_uc_cart_item_presave($item) {
  if (isset($item->data['restrict_qty']['qty']) && $item->data['restrict_qty']['qty'] > 0) {
    $is_lifetime = isset($item->data['restrict_qty']['lifetime']) && $item->data['restrict_qty']['lifetime'];
    $all_variations = isset($item->data['restrict_qty']['all_variations']) && $item->data['restrict_qty']['all_variations'];
    $restrict_qty = $is_lifetime ? $item->data['restrict_qty']['rest'] : $item->data['restrict_qty']['qty'];
    $total_restrict_qty = $restrict_qty;

    if ($all_variations) {
      // This restriction works only for items that are not new.
      $efq = new EntityFieldQuery();
      $efq->entityCondition('entity_type', 'uc_cart_item')
          ->propertyCondition('cart_id', $item->cart_id)
          ->propertyCondition('nid', $item->nid);

      if (!$item->is_new) {
        $efq->propertyCondition('cart_item_id', $item->cart_item_id, '<>');
      }

      $result = $efq->execute();
      // If there are other variations of this product in cart.
      if (!empty($result['uc_cart_item'])) {
        $uc_cart_item_ids = array_keys($result['uc_cart_item']);
        $uc_cart_items = entity_load_multiple('uc_cart_item', $uc_cart_item_ids);
        $existing_qty = 0;
        // Add the quantities of other variations if any.
        foreach ($uc_cart_items as $uc_cart_item) {
          $existing_qty += $uc_cart_item->qty;
        }
        $restrict_qty = $restrict_qty - $existing_qty;
      }
    } 
    if ($item->qty > $restrict_qty) {
      // Reduce the quantity to 1 if necessary.
      $item->qty = $restrict_qty;
      $product = node_load($item->nid);
      if ($all_variations) {
        backdrop_set_message(format_plural($total_restrict_qty, 'You may only have a total of 1 !item in your cart. Quantity has been restricted.', 'You may only have a total of @count !item in your cart. Quantity has been restricted.', array('!item' => $product->title)), 'warning');
      }
      else {
        backdrop_set_message(format_plural($restrict_qty, 'You may only add 1 !item to your cart. Quantity has been restricted.', 'You may only add @count !item to your cart. Quantity has been restricted.', array('!item' => $product->title)), 'warning');
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_restrict_qty_form_alter(&$form, &$form_state, $form_id) {
  // Disable the appropriate Qty. fields on the cart view form.
  if ($form_id == 'uc_cart_view_form') {
    for ($i = 0, $j = count(uc_cart_get_contents()); $i < $j; $i++) {
      $data = unserialize($form['items'][$i]['data']['#value']);

      // If this item has a quantity restriction on it.
      if (!empty($data['restrict_qty'])) {
        $is_lifetime = isset($data['restrict_qty']['lifetime']) && $data['restrict_qty']['lifetime'];
        $restrict_qty = $is_lifetime ? $data['restrict_qty']['rest'] : $data['restrict_qty']['qty'];
        if ($restrict_qty == 1) {
          $form['items'][$i]['qty']['#type'] = 'value';
          $form['items'][$i]['qty']['#theme'] = 'restrict_qty_field';
        }
      }
    }
  }

  if ($form_id == 'uc_product_feature_settings_form') {
    $form['#validate'][] = 'uc_restrict_qty_settings_validate';
  }
}

/**
 *  Themes cart Qty. boxes so they can't be changed. (currently not in use)
 */
function theme_restrict_qty_field($variables) {
  return check_plain($variables['form']['#value']);
}

/**
 *  Returns the number of restrict_qty features on a product node.
 */
function uc_restrict_qty_count($form_values) {
  global $user;

  $data = db_query("SELECT qty, lifetime, all_variations FROM {uc_restrict_qty_products} WHERE nid = :nid", array(':nid' => $form_values['nid']))->fetchAssoc();
  if ($data !== FALSE && $data['lifetime']) {
    $bought_qty = db_query('SELECT SUM(uop.qty) FROM {uc_orders} uo LEFT JOIN {uc_order_products} uop ON uo.order_id = uop.order_id WHERE uo.order_status = :completed AND uo.uid = :uid AND uop.nid = :nid ORDER BY uop.nid', array(
      ':completed' => 'completed',
      ':uid' => $user->uid,
      ':nid' => $form_values['nid'],
    ))->fetchField();
    $data['rest'] = $data['qty'] - $bought_qty;
  }

  return $data;
}

/* ************************************************************************* *
 *  Actions                                                                  *
 * ************************************************************************* */

/**
 * Delete all data associated with a given node.
 *
 * @param Node $node
 *   A Backdrop node object.
 */
function uc_restrict_qty_node_delete($node) {
  db_delete('uc_restrict_qty_products')
        ->condition('nid', $node->nid)
        ->execute();
}

/**
 * Delete all data associated with a given product feature.
 *
 * @param $feature
 *   An Ubercart product feature array.
 */
function uc_restrict_qty_feature_delete($pfid) {
  db_delete('uc_restrict_qty_products')
    ->condition('pfid', $pfid)
    ->execute();
}

/**
 * Implements hook_autoload_info().
 */
function uc_restrict_qty_autoload_info() {
  return array(
  );
}
